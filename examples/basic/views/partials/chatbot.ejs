<section id="chatbot-section">
    <h1>Chatbot</h1>
    <div id="chatbot-userid-display-container">
        <label>Chatbot User ID:</label>
        <span id="chatbot-userid-display">Loading...</span>
    </div>
    <div id="flow-id-controls">
        <label for="flow-id-input">Flow ID:</label>
        <input type="text" id="flow-id-input" placeholder="Enter Flow ID (default: memory-chatbot)">
        <button id="apply-flow-id-button" type="button">Apply Flow ID</button>
    </div>
    <div id="session-id-controls">
        <label for="session-id-input">Session ID:</label>
        <input type="text" id="session-id-input" placeholder="Optional: Enter Session ID">
        <button id="apply-session-id-button" type="button">Save Session ID</button>
        <button id="clear-session-id-button" type="button">Clear Session ID</button>
    </div>
    <div id="chatbot-container"></div>
</section> 
<script src="/static/langflow-chatbot.js"></script>
<script>
  // Cookie helper functions
  function setCookie(name, value, days) {
    let expires = "";
    if (days) {
      const date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
  }

  function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

  // Simple UUID generator
  function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  let currentChatbotUserid; // To store the determined chatbot user ID
  let chatWidgetFlowId = "memory-chatbot";

  function initializeChatWidget() {
    const sessionIdInput = document.getElementById('session-id-input');
    const sessionId = sessionIdInput ? sessionIdInput.value.trim() : "";
    
    const flowIdInput = document.getElementById('flow-id-input');
    let currentFlowId = chatWidgetFlowId;
    if (flowIdInput && flowIdInput.value.trim() !== "") {
        currentFlowId = flowIdInput.value.trim();
    } else if (flowIdInput) {
        flowIdInput.value = chatWidgetFlowId;
    }

    const chatContainer = document.getElementById('chatbot-container');

    if (!chatContainer) {
        console.error('Chatbot container not found.');
        return;
    }
    // Clear previous widget instance
    chatContainer.innerHTML = ''; 

    if (!currentChatbotUserid) {
        console.error('Chatbot User ID not set. Cannot initialize chat widget.');
        if (chatContainer) {
            chatContainer.innerHTML = '<p style="color: red;">Error: Chatbot User ID not available. Ensure it is set before initializing.</p>';
        }
        return;
    }

    try {
      if (window.LangflowChatbot && window.LangflowChatbot.LangflowChatClient && window.LangflowChatbot.ChatWidget) {
        let chatClient;
        if (sessionId) {
          console.log('Initializing LangflowChatClient with Session ID:', sessionId);
          chatClient = new window.LangflowChatbot.LangflowChatClient('/api/langflow', currentChatbotUserid, sessionId);
        } else {
          console.log('Initializing LangflowChatClient without a specific Session ID from input.');
          chatClient = new window.LangflowChatbot.LangflowChatClient('/api/langflow', currentChatbotUserid);
        }
        
        new window.LangflowChatbot.ChatWidget('chatbot-container', chatClient, currentFlowId);
        console.log('ChatWidget initialized/reinitialized. ChatbotUserid:', currentChatbotUserid, 'FlowId:', currentFlowId, 'SessionId from input:', sessionId || "None");
      } else {
        console.error('LangflowChatbot components not found on window.LangflowChatbot.');
        if (chatContainer) {
          chatContainer.innerHTML = '<p style="color: red;">Error loading chatbot components. See console.</p>';
        }
      }
    } catch (error) {
      console.error("Failed to initialize/reinitialize ChatWidget:", error);
      if (chatContainer) {
        chatContainer.innerHTML = '<p style="color: red;">Error loading chatbot. See console for details.</p>';
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    // Manage chatbot_userid cookie
    const appUserid = getCookie('app_userid');
    let initialChatbotUserid = getCookie('chatbot_userid');

    if (appUserid) {
      if (!initialChatbotUserid || initialChatbotUserid !== appUserid) {
        setCookie('chatbot_userid', appUserid, 365);
        initialChatbotUserid = appUserid;
        console.log('Chatbot User ID set/updated from app_userid:', appUserid);
      }
    } else {
      if (!initialChatbotUserid) {
        const newChatbotUserid = generateUUID();
        setCookie('chatbot_userid', newChatbotUserid, 365);
        initialChatbotUserid = newChatbotUserid;
        console.log('New Chatbot User ID generated:', newChatbotUserid);
      }
    }
    currentChatbotUserid = initialChatbotUserid; // Set the accessible variable

    const displayElement = document.getElementById('chatbot-userid-display');
    if (displayElement && currentChatbotUserid) {
      displayElement.textContent = currentChatbotUserid;
    } else if (displayElement) {
      displayElement.textContent = 'Not set'; 
    }

    const flowIdInput = document.getElementById('flow-id-input');
    if (flowIdInput) {
        flowIdInput.value = chatWidgetFlowId;
    }

    initializeChatWidget();

    const applyFlowIdButton = document.getElementById('apply-flow-id-button');
    if (applyFlowIdButton) {
      applyFlowIdButton.addEventListener('click', () => {
        console.log('Apply Flow ID button clicked. Reinitializing chat widget with current input value.');
        const flowIdInputElem = document.getElementById('flow-id-input');
        if (flowIdInputElem && flowIdInputElem.value.trim() === "") {
            flowIdInputElem.value = chatWidgetFlowId;
             console.log('Flow ID input was empty, reset to default:', chatWidgetFlowId);
        }
        initializeChatWidget();
      });
    }

    const applySessionIdButton = document.getElementById('apply-session-id-button');
    if (applySessionIdButton) {
      applySessionIdButton.addEventListener('click', () => {
        console.log('Save Session ID button clicked. Reinitializing chat widget with current input value.');
        initializeChatWidget();
      });
    }

    const clearButton = document.getElementById('clear-session-id-button');
    if (clearButton) {
      clearButton.addEventListener('click', () => {
        const sessionIdInput = document.getElementById('session-id-input');
        if (sessionIdInput) {
          sessionIdInput.value = '';
        }
        console.log('Session ID input cleared. Reinitializing chat widget.');
        initializeChatWidget();
      });
    }

    const sessionIdInput = document.getElementById('session-id-input');
    if (sessionIdInput) {
      sessionIdInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          event.preventDefault(); // Prevent default action if any (e.g., form submission)
          console.log('Enter key pressed in Session ID input. Reinitializing chat widget.');
          initializeChatWidget();
        }
      });
    }

    const flowIdInputField = document.getElementById('flow-id-input');
    if (flowIdInputField) {
      flowIdInputField.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          event.preventDefault();
          console.log('Enter key pressed in Flow ID input. Reinitializing chat widget.');
          if (flowIdInputField.value.trim() === "") {
            flowIdInputField.value = chatWidgetFlowId;
            console.log('Flow ID input was empty, reset to default:', chatWidgetFlowId);
          }
          initializeChatWidget();
        }
      });
    }

    // Listen for app_userid changes
    document.addEventListener('appUseridChanged', (event) => {
      const newAppUserid = event.detail.userid;
      // Get the latest chatbot_userid from cookie after potential changes
      let updatedChatbotUserid = getCookie('chatbot_userid'); 
      const displayElem = document.getElementById('chatbot-userid-display');

      console.log('appUseridChanged event received in chatbot partial. New app_userid:', newAppUserid, 'Current chatbot_userid from cookie:', updatedChatbotUserid);

      if (newAppUserid) {
        if (updatedChatbotUserid !== newAppUserid) {
          setCookie('chatbot_userid', newAppUserid, 365);
          currentChatbotUserid = newAppUserid; // Update accessible variable
          if (displayElem) {
            displayElem.textContent = newAppUserid;
          }
          console.log('Chatbot User ID dynamically updated from app_userid:', newAppUserid);
          initializeChatWidget(); // Reinitialize with new/updated chatbotUserid
        } else {
          // If appUserid is set but chatbot_userid already matches, ensure currentChatbotUserid var is also aligned if it somehow differed.
          currentChatbotUserid = newAppUserid; 
        }
      } else {
        const newGeneratedChatbotUserid = generateUUID();
        setCookie('chatbot_userid', newGeneratedChatbotUserid, 365);
        currentChatbotUserid = newGeneratedChatbotUserid; // Update accessible variable
        if (displayElem) {
          displayElem.textContent = newGeneratedChatbotUserid;
        }
        console.log('app_userid cleared. New Chatbot User ID generated:', newGeneratedChatbotUserid);
        initializeChatWidget(); // Reinitialize with new chatbotUserid
      }
    });

    // The original try-catch block for chat widget initialization is now encapsulated within initializeOrReinitializeChatWidget()
    // and called at the appropriate times.
  });
</script> 