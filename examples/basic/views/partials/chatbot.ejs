<section id="chatbot-section">
    <h1>Chatbot</h1>
    <div style="max-width: 1300px; margin: 40px auto 0 auto; padding: 0 32px;">
        <div id="chatbot-flex-wrapper" style="display: flex; align-items: flex-start; gap: 40px;">
            <!-- Left column: Configuration -->
            <div id="chatbot-config-column" style="flex: 0 0 300px; min-width: 280px; background: #fafbfc; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.04); padding: 24px;">
                <fieldset style="margin-bottom: 20px; border: 1px solid #ccc; border-radius: 6px; padding: 18px; background: #fff;">
                    <legend style="font-weight: bold; padding: 0 5px;">Chatbot Configuration</legend>
                    <div style="margin-bottom: 16px;">
                        <label for="proxy-endpoint-id-select" style="display: block; margin-bottom: 4px;">Chatbot Profile:</label>
                        <select id="proxy-endpoint-id-select" style="width: 100%;"></select>
                    </div>
                    <div style="margin-bottom: 16px;">
                        <label for="session-id-input" style="display: block; margin-bottom: 4px;">Session ID (Optional):</label>
                        <input type="text" id="session-id-input" placeholder="Leave blank for new session" style="width: 100%;">
                    </div>
                    <button id="launch-chatbot-button" type="button" style="width: 100%;">Launch / Re-launch Chatbot</button>
                </fieldset>

            </div>
            <!-- Right column: Embedded Chatbot -->
            <div id="embedded-chatbot-container-wrapper" style="flex: 1; min-width: 350px;">
                <!-- Session management fieldset removed from here -->
                <div id="chatbot-container" style="max-width: 600px; border: 1px solid #ddd; box-shadow: 0 0 10px rgba(0,0,0,0.1); overflow: hidden; margin-left: auto; margin-right: auto;"></div>
            </div>
        </div>
    </div>
</section> 

<link rel="stylesheet" href="/static/langflow-chatbot.css">
<style>
    :root { 
        /* 
         * Example of overriding default styles.
         * In a production environment, you would typically define these in your own CSS file
         * or directly in a style tag after loading langflow-chatbot.css.
         * These variables control the color palette of the chatbot components.
         */
        --langflow-chatbot-palette-primary: #28a745; /* Main theme color (buttons, icons) */
        --langflow-chatbot-palette-primary-hover: #1e7e34; /* Darker shade for hover states */
        --langflow-chatbot-palette-focus-ring: rgba(40, 167, 69, 0.25); /* Focus ring for accessibility */
        /* You can also override other variables like:
           --langflow-chatbot-palette-secondary, 
           --langflow-chatbot-font-family,
           --langflow-chatbot-font-size-normal,
           --langflow-chatbot-border-radius,
           etc. 
           Refer to the langflow-chatbot.css for a full list of available CSS variables.
        */
    }
    @media (max-width: 900px) {
        #chatbot-flex-wrapper {
            flex-direction: column;
        }
        #embedded-chatbot-container-wrapper {
            margin-left: 0 !important;
        }
        #chatbot-config-column {
            min-width: 0 !important;
            width: 100% !important;
            box-sizing: border-box;
        }
    }
</style>

<script src="/static/LangflowChatbotPlugin.js"></script>
<script src="/static/example-app-logic.js"></script> 
<script>
  let currentChatbotInstance = null;

  async function launchChatbot() {
    console.log("launchChatbot (in ejs) called");
    // Get configuration from our example app's UI logic
    // In a real application, this might come from a different source or be hardcoded.
    const userConfig = window.ChatbotExampleApp.ui.getUserProvidedConfig();
    
    if (!userConfig.proxyEndpointId) {
        alert("No Chatbot Profile selected or available. Cannot launch chatbot.");
        console.error("Launch cancelled by ejs: No proxyEndpointId provided from UI.");
        return;
    }

    // --- Beyond the minimal: Handling re-launch --- 
    // If an instance already exists (e.g., user changed profile or session ID and clicked launch again),
    // it's good practice to destroy it to clean up resources and event listeners.
    if (currentChatbotInstance && typeof currentChatbotInstance.destroy === 'function') {
      console.log("Destroying existing chatbot instance...");
      currentChatbotInstance.destroy();
      currentChatbotInstance = null;
    }

    // --- Core Plugin Configuration --- 
    const pluginConfig = {
      containerId: 'chatbot-container', // REQUIRED: The ID of the div where the chatbot will be rendered.
      proxyEndpointId: userConfig.proxyEndpointId, // REQUIRED: Identifies the chatbot profile to use.
      sessionId: userConfig.sessionId, // OPTIONAL: Provide a session ID to resume a conversation.
                                       // If undefined, the plugin will typically start a new session.
    };
    
    try {
      console.log("Initializing LangflowChatbotPlugin with config:", pluginConfig);
      if (!window.LangflowChatbotPlugin || typeof window.LangflowChatbotPlugin.init !== 'function') {
        console.error("LangflowChatbotPlugin.init is not available. Ensure the plugin script is loaded correctly.");
        alert("Critical Error: Chatbot plugin core not loaded!");
        return;
      }

      // --- Creating the Chatbot Object --- 
      // This is the core step: initializing the plugin with the configuration.
      // The `init` method returns a promise that resolves to the chatbot instance.
      currentChatbotInstance = await window.LangflowChatbotPlugin.init(pluginConfig);
      console.log("Chatbot instance launched/re-launched successfully.", currentChatbotInstance);

      // --- Beyond the minimal: Interacting with the Chatbot Instance --- 
      // Once initialized, you can interact with the chatbot instance, primarily by listening to events.
      if (currentChatbotInstance && typeof currentChatbotInstance.on === 'function') {
        // Example: Listen for session ID changes (e.g., if a new session is started by the plugin)
        currentChatbotInstance.on('sessionChanged', (newSessionId) => {
          console.log('Chatbot (in ejs) received sessionChanged event:', newSessionId);
          // Update the UI input field (this specific UI update is handled by example-app-logic.js)
          window.ChatbotExampleApp.ui.updateSessionIdField(newSessionId);
        });
        
        // --- Beyond the minimal: More event listeners ---
        // Listen for other events to integrate more deeply with your application.
        // Common events might include:
        // - 'messageSent': When the user sends a message.
        // - 'messageReceived': When the chatbot responds.
        // - 'historyLoaded': When chat history is loaded.
        // - 'chatOpened', 'chatClosed': For UI state changes.
        // - 'error': To handle errors from the plugin.
        // Example: 
        // currentChatbotInstance.on('messageReceived', (messageData) => {
        //   console.log("Chatbot message received:", messageData);
        //   // You could trigger analytics, update other UI parts, etc.
        // });
        // currentChatbotInstance.on('error', (errorDetails) => {
        //   console.error("Chatbot plugin error:", errorDetails);
        //   // Display a user-friendly error message or attempt recovery.
        // });
      } else {
        console.warn("Chatbot instance does not support .on() method or is not fully initialized.");
      }

    } catch (error) {
      console.error("Error launching chatbot (in ejs):", error);
      alert(`Failed to launch chatbot: ${(error instanceof Error ? error.message : String(error))}`);
      // --- Beyond the minimal: Robust error handling ---
      // Ensure the instance is cleared on failure to prevent issues with subsequent launches.
      // You might also want to update the UI to reflect the error state.
      if (currentChatbotInstance) {
        try { currentChatbotInstance.destroy(); } catch (e) { /* ignore destroy error on top of launch error */ }
        currentChatbotInstance = null;
      }
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    // This example uses an external script (example-app-logic.js) to manage the
    // example-specific UI elements (profile dropdown, session input, launch button).
    if (window.ChatbotExampleApp && window.ChatbotExampleApp.ui && typeof window.ChatbotExampleApp.ui.initializeUI === 'function') {
      // Initialize the UI elements and provide the launchChatbot function (defined above in this ejs file) 
      // as a callback. The UI logic will call this function when the user interacts with the launch button
      // or when an auto-launch condition is met.
      window.ChatbotExampleApp.ui.initializeUI(launchChatbot)
        .catch(error => {
            console.error("Error during UI initialization:", error);
            alert("Failed to initialize the chatbot example UI.");
        });
    } else {
      console.error("ChatbotExampleApp.ui.initializeUI not found. Ensure example-app-logic.js is loaded correctly.");
      alert("Critical Error: Failed to initialize chatbot example application UI logic.");
    }
  });
</script>