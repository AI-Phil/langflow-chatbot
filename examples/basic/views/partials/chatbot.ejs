<section id="chatbot-section">
    <h1>Chatbot</h1>

    <fieldset id="chatbot-settings" style="margin-bottom: 20px; border: 1px solid #ccc; padding: 10px;">
        <legend style="font-weight: bold; padding: 0 5px;">Chatbot Settings</legend>
        <div id="chat-type-controls" style="margin-bottom: 10px;">
            <label for="chat-type-toggle">Use Floating Widget:</label>
            <input type="checkbox" id="chat-type-toggle" checked>
        </div>
        <div id="flow-id-controls">
            <label for="flow-id-input">Flow ID:</label>
            <input type="text" id="flow-id-input" placeholder="Enter Flow ID (default: memory-chatbot)">
            <button id="apply-flow-id-button" type="button">Apply Flow ID</button>
        </div>
        <div id="stream-toggle-controls" style="margin-bottom: 10px; margin-top: 10px;">
            <label for="stream-toggle-input">Enable Stream:</label>
            <input type="checkbox" id="stream-toggle-input" checked>
        </div>
        <div id="session-id-controls">
            <label for="session-id-input">Session ID:</label>
            <input type="text" id="session-id-input" placeholder="Optional: Enter Session ID">
            <button id="apply-session-id-button" type="button">Save Session ID</button>
            <button id="clear-session-id-button" type="button">Clear Session ID</button>
        </div>
    </fieldset>

    <div id="embedded-chatbot-container-wrapper">
        <div id="chatbot-container" style="max-width: 600px; margin: 20px auto; border: 1px solid #ddd; box-shadow: 0 0 10px rgba(0,0,0,0.1); overflow: hidden; "></div>
    </div>
</section> 

<link rel="stylesheet" href="/static/langflow-chatbot.css">
<style>
    /* Example of overriding default styles in chatbot.ejs */
    /* Let's change the user message bubble to a green color */
    .user-message .message-bubble {
        background-color: #28a745; /* A pleasant green */
        color: white;
    }

    /* And maybe make the send button match this new user color */
    .send-button {
        background-color: #28a745;
    }
    .send-button:hover {
        background-color: #1e7e34; /* Darker green on hover */
    }
    .chat-input:focus {
        border-color: #28a745;
        box-shadow: 0 0 0 0.2rem rgba(40,167,69,.25);
    }

    /* Overrides for FloatingChatWidget theme */
    .floating-chat-button {
        background-color: #28a745 !important; /* A pleasant green */
    }
    .floating-chat-button:hover {
        background-color: #1e7e34 !important; /* Darker green on hover */
    }
    .floating-chat-header {
        background-color: #28a745 !important; /* A pleasant green */
    }
</style>

<script src="/static/langflow-chatbot.js"></script>
<script>
  // Cookie helper functions
  function setCookie(name, value, days) {
    let expires = "";
    if (days) {
      const date = new Date();
      date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
      expires = "; expires=" + date.toUTCString();
    }
    document.cookie = name + "=" + (value || "")  + expires + "; path=/";
  }

  function getCookie(name) {
    const nameEQ = name + "=";
    const ca = document.cookie.split(';');
    for(let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') c = c.substring(1, c.length);
      if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
  }

  // Simple UUID generator
  function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
      return v.toString(16);
    });
  }

  let chatWidgetFlowId = "memory-chatbot";
  let currentChatWidgetInstance = null; // To keep track of the current widget instance for cleanup

  function initializeChatWidget() {
    // Clear previous widget instance if it exists
    if (currentChatWidgetInstance && typeof currentChatWidgetInstance.destroy === 'function') {
        currentChatWidgetInstance.destroy();
        currentChatWidgetInstance = null;
    }
    // Also ensure the old container is cleared if we are switching back to embedded
    const embeddedChatContainer = document.getElementById('chatbot-container');
    if (embeddedChatContainer) {
        embeddedChatContainer.innerHTML = '';
    }

    const sessionIdInput = document.getElementById('session-id-input');
    const sessionId = sessionIdInput ? sessionIdInput.value.trim() : "";
    
    const flowIdInput = document.getElementById('flow-id-input');
    let currentFlowId = chatWidgetFlowId;
    if (flowIdInput && flowIdInput.value.trim() !== "") {
        currentFlowId = flowIdInput.value.trim();
    } else if (flowIdInput) {
        flowIdInput.value = chatWidgetFlowId;
    }

    const streamToggleInput = document.getElementById('stream-toggle-input');
    const enableStream = streamToggleInput ? streamToggleInput.checked : true;

    const chatTypeToggle = document.getElementById('chat-type-toggle');
    const useFloatingWidget = chatTypeToggle ? chatTypeToggle.checked : false;

    const embeddedContainerWrapper = document.getElementById('embedded-chatbot-container-wrapper');

    try {
      if (window.LangflowChatbot && window.LangflowChatbot.LangflowChatClient) {
        let chatClient;
        if (sessionId) {
          console.log('Initializing LangflowChatClient with Session ID:', sessionId);
          chatClient = new window.LangflowChatbot.LangflowChatClient('/api/langflow', sessionId);
        } else {
          console.log('Initializing LangflowChatClient without a specific Session ID from input.');
          chatClient = new window.LangflowChatbot.LangflowChatClient('/api/langflow');
        }
        
        const chatWidgetInternalConfig = {
            userSender: "Me", 
            botSender: "Assistant", 
            messageTemplate: `
                <div class="{{messageClasses}} message-block">
                    <div class="sender-name-display">{{sender}}</div>
                    <div class="message-bubble">
                        <span class="message-text-content">{{message}}</span>
                    </div>
                </div>
            `
        };

        if (useFloatingWidget) {
            if (embeddedContainerWrapper) embeddedContainerWrapper.style.display = 'none';
            if (window.LangflowChatbot.FloatingChatWidget) {
                currentChatWidgetInstance = new window.LangflowChatbot.FloatingChatWidget(
                    chatClient, 
                    currentFlowId, 
                    enableStream, 
                    {
                        chatWidgetConfig: chatWidgetInternalConfig,
                        widgetTitle: "Floating Assistant",
                        position: 'bottom-right' // Example position
                    }
                );
                console.log('FloatingChatWidget initialized. FlowId:', currentFlowId, 'SessionId:', sessionId || "None", "Stream:", enableStream);
            } else {
                console.error('FloatingChatWidget component not found on window.LangflowChatbot.');
                alert('FloatingChatWidget component not found. Check console.');
            }
        } else {
            if (embeddedContainerWrapper) embeddedContainerWrapper.style.display = 'block';
            const chatContainer = document.getElementById('chatbot-container');
            if (chatContainer && window.LangflowChatbot.ChatWidget) {
                chatContainer.innerHTML = ''; // Clear it before new widget
                currentChatWidgetInstance = new window.LangflowChatbot.ChatWidget(
                    'chatbot-container', 
                    chatClient, 
                    currentFlowId, 
                    enableStream, 
                    chatWidgetInternalConfig
                );
                console.log('ChatWidget (embedded) initialized. FlowId:', currentFlowId, 'SessionId:', sessionId || "None", "Stream:", enableStream);
            } else {
                 if (!chatContainer) console.error('Chatbot container not found for embedded chat.');
                 if (!window.LangflowChatbot.ChatWidget) console.error('ChatWidget component not found.');
                 alert('Error setting up embedded chat. Check console.');
            }
        }
      } else {
        console.error('LangflowChatbot components not found on window.LangflowChatbot.');
        const mainChatArea = document.getElementById('chatbot-container') || document.getElementById('embedded-chatbot-container-wrapper') || document.body;
        mainChatArea.innerHTML = '<p style="color: red;">Error loading chatbot base components. See console.</p>';
      }
    } catch (error) {
      console.error("Failed to initialize/reinitialize ChatWidget:", error);
      const mainChatArea = document.getElementById('chatbot-container') || document.getElementById('embedded-chatbot-container-wrapper') || document.body;
      mainChatArea.innerHTML = '<p style="color: red;">Error loading chatbot. See console for details.</p>';
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    const flowIdInput = document.getElementById('flow-id-input');
    if (flowIdInput) {
        flowIdInput.value = chatWidgetFlowId;
    }

    initializeChatWidget();

    const applyFlowIdButton = document.getElementById('apply-flow-id-button');
    if (applyFlowIdButton) {
      applyFlowIdButton.addEventListener('click', () => {
        console.log('Apply Flow ID button clicked. Reinitializing chat widget with current input value.');
        const flowIdInputElem = document.getElementById('flow-id-input');
        if (flowIdInputElem && flowIdInputElem.value.trim() === "") {
            flowIdInputElem.value = chatWidgetFlowId;
             console.log('Flow ID input was empty, reset to default:', chatWidgetFlowId);
        }
        initializeChatWidget();
      });
    }

    const applySessionIdButton = document.getElementById('apply-session-id-button');
    if (applySessionIdButton) {
      applySessionIdButton.addEventListener('click', () => {
        console.log('Save Session ID button clicked. Reinitializing chat widget with current input value.');
        initializeChatWidget();
      });
    }

    const clearButton = document.getElementById('clear-session-id-button');
    if (clearButton) {
      clearButton.addEventListener('click', () => {
        const sessionIdInput = document.getElementById('session-id-input');
        if (sessionIdInput) {
          sessionIdInput.value = '';
        }
        console.log('Session ID input cleared. Reinitializing chat widget.');
        initializeChatWidget();
      });
    }

    const sessionIdInput = document.getElementById('session-id-input');
    if (sessionIdInput) {
      sessionIdInput.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          event.preventDefault(); // Prevent default action if any (e.g., form submission)
          console.log('Enter key pressed in Session ID input. Reinitializing chat widget.');
          initializeChatWidget();
        }
      });
    }

    const flowIdInputField = document.getElementById('flow-id-input');
    if (flowIdInputField) {
      flowIdInputField.addEventListener('keydown', (event) => {
        if (event.key === 'Enter') {
          event.preventDefault();
          console.log('Enter key pressed in Flow ID input. Reinitializing chat widget.');
          if (flowIdInputField.value.trim() === "") {
            flowIdInputField.value = chatWidgetFlowId;
            console.log('Flow ID input was empty, reset to default:', chatWidgetFlowId);
          }
          initializeChatWidget();
        }
      });
    }

    const streamToggleCheckbox = document.getElementById('stream-toggle-input');
    if (streamToggleCheckbox) {
        streamToggleCheckbox.addEventListener('change', () => {
            console.log('Stream toggle changed. Reinitializing chat widget.');
            initializeChatWidget();
        });
    }

    const chatTypeToggleElement = document.getElementById('chat-type-toggle');
    if (chatTypeToggleElement) {
        chatTypeToggleElement.addEventListener('change', () => {
            console.log('Chat type toggle changed. Reinitializing chat widget.');
            initializeChatWidget(); 
        });
    }
  });
</script> 