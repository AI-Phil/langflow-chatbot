<section id="chatbot-section">
    <h1>Chatbot</h1>
    <div style="max-width: 1300px; margin: 40px auto 0 auto; padding: 0 32px;">
        <div id="chatbot-flex-wrapper" style="display: flex; align-items: flex-start; gap: 40px;">
            <!-- Left column: Simplified Configuration -->
            <div id="chatbot-config-column" style="flex: 0 0 300px; min-width: 280px; background: #fafbfc; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.04); padding: 24px;">
                <fieldset style="margin-bottom: 20px; border: 1px solid #ccc; border-radius: 6px; padding: 18px; background: #fff;">
                    <legend style="font-weight: bold; padding: 0 5px;">Launch Chatbot</legend>
                    <div style="margin-bottom: 16px;">
                        <label for="proxy-endpoint-id-select" style="display: block; margin-bottom: 4px;">Chatbot Profile:</label>
                        <select id="proxy-endpoint-id-select" style="width: 100%;"></select>
                    </div>
                    <button id="launch-chatbot-button" type="button" style="width: 100%;">Launch Chatbot</button>
                </fieldset>

                <fieldset id="session-management" style="margin-bottom: 20px; border: 1px solid #ccc; border-radius: 6px; padding: 18px; background: #fff; /*max-width: 600px; width: 100%; margin-left: auto; margin-right: auto;*/">
                    <legend style="font-weight: bold; padding: 0 5px;">Session Management</legend>
                    <div id="session-id-controls" style="margin-bottom: 0;">
                        <label for="session-id-input" style="display: block; margin-bottom: 4px;">Session ID:</label>
                        <input type="text" id="session-id-input" placeholder="Optional: Enter Session ID or auto-assigned" style="width: 100%; margin-bottom: 8px;">
                        <button id="apply-session-id-button" type="button" style="width: 100%; margin-bottom: 8px;">Apply Session ID to Active Chat</button>
                        <button id="clear-session-id-button" type="button" style="width: 100%;">Clear Session ID & Restart Chat</button>
                    </div>
                </fieldset>
            </div>
            <!-- Right column: Embedded Chatbot -->
            <div id="embedded-chatbot-container-wrapper" style="flex: 1; min-width: 350px;">
                <!-- Session management fieldset removed from here -->
                <div id="chatbot-container" style="max-width: 600px; border: 1px solid #ddd; box-shadow: 0 0 10px rgba(0,0,0,0.1); overflow: hidden; margin-left: auto; margin-right: auto;"></div>
            </div>
        </div>
    </div>
</section> 

<link rel="stylesheet" href="/static/langflow-chatbot.css">
<style>
    :root { 
        /* 
         * Example of overriding default styles.
         * In a production environment, you would typically define these in your own CSS file
         * or directly in a style tag after loading langflow-chatbot.css.
         * These variables control the color palette of the chatbot components.
         */
        --langflow-chatbot-palette-primary: #28a745; /* Main theme color (buttons, icons) */
        --langflow-chatbot-palette-primary-hover: #1e7e34; /* Darker shade for hover states */
        --langflow-chatbot-palette-focus-ring: rgba(40, 167, 69, 0.25); /* Focus ring for accessibility */
        /* You can also override other variables like:
           --langflow-chatbot-palette-secondary, 
           --langflow-chatbot-font-family,
           --langflow-chatbot-font-size-normal,
           --langflow-chatbot-border-radius,
           etc. 
           Refer to the langflow-chatbot.css for a full list of available CSS variables.
        */
    }
    @media (max-width: 900px) {
        #chatbot-flex-wrapper {
            flex-direction: column;
        }
        #embedded-chatbot-container-wrapper {
            margin-left: 0 !important;
        }
        #chatbot-config-column {
            min-width: 0 !important;
            width: 100% !important;
            box-sizing: border-box;
        }
    }
</style>

<script src="/static/langflow-chatbot.js"></script>
<script src="/static/LangflowChatbotPlugin.js"></script>
<script>
  let currentChatbotInstance = null;

  function getConfigFromUI() {
    // Simplified: only proxyEndpointId and sessionId are taken from the UI for plugin initialization
    // The plugin will fetch the rest of its config.
    const profileSelect = document.getElementById('proxy-endpoint-id-select');
    return {
      containerId: 'chatbot-container',
      proxyEndpointId: profileSelect ? profileSelect.value : 'memory', // Default if select not found
      sessionId: document.getElementById('session-id-input').value.trim() || undefined,
    };
  }

  async function launchChatbot() {
    if (currentChatbotInstance && typeof currentChatbotInstance.destroy === 'function') {
      currentChatbotInstance.destroy();
      currentChatbotInstance = null;
    }
    // uiConfig now only contains essential info for the plugin to fetch its full config
    const uiConfig = getConfigFromUI(); 
    
    try {
      // Ensure LangflowChatbotPlugin and its init method are available globally
      if (window.LangflowChatbotPlugin && typeof window.LangflowChatbotPlugin.init === 'function') {
        currentChatbotInstance = await window.LangflowChatbotPlugin.init(uiConfig);
        console.log("Chatbot instance launched/re-launched.");

        // Listen for sessionChanged event from the plugin
        if (currentChatbotInstance && typeof currentChatbotInstance.on === 'function') {
          currentChatbotInstance.on('sessionChanged', (newSessionId) => {
            const sessionIdInput = document.getElementById('session-id-input');
            if (sessionIdInput) {
              sessionIdInput.value = newSessionId;
              console.log('UI Session ID field updated to:', newSessionId);
            }
          });
        }

      } else {
        console.error("LangflowChatbotPlugin.init is not available. Ensure the plugin script is loaded correctly.");
        alert("Error: Chatbot plugin not loaded!");
      }
    } catch (error) {
      console.error("Error launching chatbot:", error);
      alert(`Failed to launch chatbot: ${error.message}`);
    }
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const profileSelect = document.getElementById('proxy-endpoint-id-select');
    const launchButton = document.getElementById('launch-chatbot-button');

    try {
        const response = await fetch('/api/langflow/profiles');
        if (!response.ok) {
            throw new Error(`Failed to fetch profiles: ${response.status} ${response.statusText}`);
        }
        const profiles = await response.json();

        if (profiles && profiles.length > 0) {
            profiles.forEach(profile => {
                const option = document.createElement('option');
                option.value = profile.proxyEndpointId;
                option.textContent = profile.widgetTitle || profile.proxyEndpointId;
                if (profileSelect) profileSelect.appendChild(option);
            });
            // Set the first profile as default if select exists
            if (profileSelect) profileSelect.value = profiles[0].proxyEndpointId;
        } else {
            console.warn("No chatbot profiles received from server or profiles list is empty.");
            if (profileSelect) {
                const option = document.createElement('option');
                option.textContent = 'No profiles available';
                option.disabled = true;
                profileSelect.appendChild(option);
            }
            if (launchButton) launchButton.disabled = true;
        }
    } catch (error) {
        console.error("Error fetching chatbot profiles:", error);
        if (profileSelect) {
            const option = document.createElement('option');
            option.textContent = 'Error loading profiles';
            option.disabled = true;
            profileSelect.appendChild(option);
        }
        if (launchButton) launchButton.disabled = true; 
        alert(`Could not load chatbot profiles: ${error.message}. Please check server logs or try refreshing.`);
    }
    
    // Removed default proxyEndpointId setting for the old input field
    // document.getElementById('proxy-endpoint-id-input').value = 'memory'; 

    // Make session ID input readonly as it will be updated by the plugin event
    const sessionIdElement = document.getElementById('session-id-input');
    if (sessionIdElement) {
        // sessionIdElement.readOnly = true; // Decided against making it readonly to allow user to paste one in
    } else {
        console.warn("Session ID input field not found on DOMContentLoaded");
    }

    document.getElementById('launch-chatbot-button').addEventListener('click', launchChatbot);
    
    document.getElementById('apply-session-id-button').addEventListener('click', () => {
        // User wants to apply a manually entered/pasted session ID
        // We will re-launch the chatbot. The getConfigFromUI will pick up the new value.
        const sessionIdInput = document.getElementById('session-id-input');
        if (sessionIdInput && sessionIdInput.value.trim() === "") {
            // if user clears it and hits apply, treat as wanting a new session (like clear button)
             document.getElementById('session-id-input').value = ''; // ensure it's truly empty for getConfigFromUI
        }
        launchChatbot(); 
    });

    document.getElementById('clear-session-id-button').addEventListener('click', () => {
      const sessionIdInput = document.getElementById('session-id-input');
      if (sessionIdInput) {
        sessionIdInput.value = '';
      }
      launchChatbot(); 
    });

    // Removed keydown for session-id-input as apply button is clearer -- Reinstating for Enter key functionality
    document.getElementById('session-id-input').addEventListener('keydown', (event) => {
      if (event.key === 'Enter') {
        event.preventDefault(); // Prevent default form submission if it were in a form
        document.getElementById('apply-session-id-button').click();
      }
    });

    // launchChatbot(); // Optional: auto-launch on load
  });
</script> 